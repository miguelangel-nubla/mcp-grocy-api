# .github/workflows/docker-publish.yml
name: Build and Publish Docker Image to GHCR

on:
  push:
    branches:
      - main # Trigger on push to main branch
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Needed to check out code, read package.json, and read release info
  packages: write # Needed to push Docker image to GHCR

jobs:
  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract version from package.json
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if version is a development version
        id: check_version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "$VERSION" == *-dev* ]]; then
            echo "Version $VERSION is a development version, skipping Docker build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION is a stable version"

            # Get latest release and compare versions
            echo "Checking if we need to build for version $VERSION..."
            
            LATEST_TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
            if [ "$LATEST_TAG" == "null" ]; then
              echo "No releases found. Build needed."
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              # Extract version from tag (remove 'v' prefix if present)
              LATEST_VERSION=${LATEST_TAG#v}
              echo "Latest release version: $LATEST_VERSION"
              
              if [ "$VERSION" != "$LATEST_VERSION" ]; then
                echo "Version mismatch. Build needed."
                echo "should_build=true" >> $GITHUB_OUTPUT
              else
                echo "Versions match. No build needed."
                echo "should_build=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Log in to GitHub Container Registry
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata for Docker
        if: steps.check_version.outputs.should_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest
      
      # Build for AMD64 first (most systems)
      - name: Build and push AMD64 image
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-amd64,ghcr.io/${{ github.repository }}:latest-amd64
          build-args: |
            NODE_VERSION=20
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest-amd64
          cache-to: type=inline
      
      # Build ARM64 separately with special settings
      - name: Build and push ARM64 image
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-arm64,ghcr.io/${{ github.repository }}:latest-arm64
          build-args: |
            NODE_VERSION=20
            NODE_OPTIONS=--max_old_space_size=4096
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest-arm64
          cache-to: type=inline
      
      # Create a manifest that includes both architectures
      - name: Create and push manifest
        if: steps.check_version.outputs.should_build == 'true'
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }} \
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-arm64
          
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:latest-amd64 \
            ghcr.io/${{ github.repository }}:latest-arm64