# .github/workflows/docker-publish.yml
name: Build and Publish Docker Image to GHCR

on:
  push:
    branches:
      - main # Trigger on push to main branch
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Needed to check out code, read package.json, and read release info
  packages: write # Needed to push Docker image to GHCR

jobs:
  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract version from package.json
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Compare package version with latest release tag
        id: compare_versions
        uses: actions/github-script@v7
        with:
          script: |
            const packageVersion = "${{ steps.get_version.outputs.version }}";
            console.log(`Package version: ${packageVersion}`);

            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const latestTag = latestRelease.data.tag_name;
              console.log(`Latest release tag: ${latestTag}`);

              // Assuming tag is like 'v1.2.3', remove 'v' prefix
              const latestVersion = latestTag.startsWith('v') ? latestTag.substring(1) : latestTag;
              console.log(`Latest release version: ${latestVersion}`);

              if (packageVersion !== latestVersion) {
                console.log('Version mismatch. Build needed.');
                core.setOutput('needs_build', 'true');
              } else {
                console.log('Versions match. No build needed.');
                core.setOutput('needs_build', 'false');
              }
            } catch (error) {
              // Handle case where no releases exist yet or API error
              if (error.status === 404) {
                console.log('No releases found. Build needed.');
                core.setOutput('needs_build', 'true');
              } else {
                console.error('Error fetching latest release:', error);
                core.setFailed(`Error fetching latest release: ${error.message}`);
                core.setOutput('needs_build', 'false'); // Don't build on error
              }
            }

      - name: Log in to GitHub Container Registry
        if: steps.compare_versions.outputs.needs_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        if: steps.compare_versions.outputs.needs_build == 'true'
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        if: steps.compare_versions.outputs.needs_build == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata for Docker
        if: steps.compare_versions.outputs.needs_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest
      
      # Build for AMD64 first (most systems)
      - name: Build and push AMD64 image
        if: steps.compare_versions.outputs.needs_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-amd64,ghcr.io/${{ github.repository }}:latest-amd64
          build-args: |
            NODE_VERSION=20
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest-amd64
          cache-to: type=inline
      
      # Build ARM64 separately with special settings
      - name: Build and push ARM64 image
        if: steps.compare_versions.outputs.needs_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-arm64,ghcr.io/${{ github.repository }}:latest-arm64
          build-args: |
            NODE_VERSION=20
            NODE_OPTIONS=--max_old_space_size=4096
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest-arm64
          cache-to: type=inline
      
      # Create a manifest that includes both architectures
      - name: Create and push manifest
        if: steps.compare_versions.outputs.needs_build == 'true'
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }} \
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-arm64
          
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:latest-amd64 \
            ghcr.io/${{ github.repository }}:latest-arm64