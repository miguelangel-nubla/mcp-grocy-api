# .github/workflows/docker-publish.yml
name: Publish Docker Image to GHCR

on:
  release:
    types: [published] # Trigger when a new release is published
  workflow_dispatch: # Allows manual triggering
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [main]
    types: [completed]

permissions:
  contents: read # Needed to check out code
  packages: write # Needed to push Docker image to GHCR

jobs:
  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    # Don't run if triggered by workflow_run but the pipeline failed
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get release version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            # For release event, use the release tag
            TAG_NAME="${{ github.event.release.tag_name }}"
            # Extract version from release tag (remove 'v' prefix if present)
            if [[ "$TAG_NAME" == v* ]]; then
              VERSION="${TAG_NAME#v}"
            else
              VERSION="$TAG_NAME"
            fi
          else
            # For manual workflow, use package.json version
            VERSION=$(node -p "require('./package.json').version")
          fi
          
          # Check if it's a development version
          if [[ "$VERSION" == *-dev* ]]; then
            echo "::warning::This is a development version ($VERSION). Consider only publishing stable versions."
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building Docker image for version: $VERSION"

      # Check if this version already exists in the registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image already exists
        id: check_image
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Checking if Docker image for version $VERSION already exists..."
          
          # Try to pull the image manifest - will fail if it doesn't exist
          if docker buildx imagetools inspect ghcr.io/${{ github.repository }}:$VERSION &>/dev/null; then
            echo "Image already exists in registry. Skipping build."
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist yet. Proceeding with build."
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      # Set up for multi-architecture builds
      - name: Set up QEMU
        if: steps.check_image.outputs.image_exists != 'true'
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        if: steps.check_image.outputs.image_exists != 'true'
        uses: docker/setup-buildx-action@v3
      
      # Build AMD64 image
      - name: Build and push AMD64 image
        if: steps.check_image.outputs.image_exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-amd64,ghcr.io/${{ github.repository }}:latest-amd64
          build-args: |
            NODE_VERSION=20
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest-amd64
          cache-to: type=inline
      
      # Build ARM64 image with memory settings for ARM builds
      - name: Build and push ARM64 image
        if: steps.check_image.outputs.image_exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-arm64,ghcr.io/${{ github.repository }}:latest-arm64
          build-args: |
            NODE_VERSION=20
            NODE_OPTIONS=--max_old_space_size=4096
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest-arm64
          cache-to: type=inline
      
      # Create multi-architecture manifest
      - name: Create and push manifest
        if: steps.check_image.outputs.image_exists != 'true'
        run: |
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }} \
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}-arm64
          
          docker buildx imagetools create -t ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:latest-amd64 \
            ghcr.io/${{ github.repository }}:latest-arm64
            
      # Summary
      - name: Workflow Summary
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "${{ steps.check_image.outputs.image_exists }}" == "true" ]]; then
            echo "Image for version $VERSION already exists in the registry. No new image was built."
          else
            echo "Successfully built and published Docker image for version $VERSION."
          fi