# .github/workflows/npm-publish.yml
name: Publish Package to npm

on:
  release:
    types: [published] # Trigger only when a release is published (like docker-publish)
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Needed to check out code
  packages: write # Needed for npm registry

jobs:
  publish-npm:
    name: Publish Package to NPM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          fetch-tags: true # Fetch all tags to ensure release tag is available
          
      # If triggered by release, explicitly checkout the tag
      - name: Checkout release tag if available
        if: github.event_name == 'release'
        run: |
          echo "This workflow was triggered by a release event"
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "Release tag name: $TAG_NAME"
          
          # Checkout the specific tag to ensure we're building the right code
          git checkout $TAG_NAME || {
            echo "Warning: Failed to checkout tag $TAG_NAME"
            echo "Falling back to the default checked-out code"
          }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Verify NPM_TOKEN secret
        env:
          # Don't actually print the token, just check if it's available
          CHECK_TOKEN: ${{ secrets.NPM_TOKEN != '' }}
        run: |
          if [[ "$CHECK_TOKEN" != "true" ]]; then
            echo "::error::NPM_TOKEN secret appears to be missing or empty"
            echo "Please add an NPM_TOKEN secret in your repo settings: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "This should be an npm automation token with publish access"
          else
            echo "NPM_TOKEN secret is available"
          fi
          
      - name: Verify NPM_TOKEN secret
        env:
          # Don't actually print the token, just check if it's available
          CHECK_TOKEN: ${{ secrets.NPM_TOKEN != '' }}
        run: |
          if [[ "$CHECK_TOKEN" != "true" ]]; then
            echo "::error::NPM_TOKEN secret appears to be missing or empty"
            echo "Please add an NPM_TOKEN secret in your repo settings: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "This should be an npm automation token with publish access"
          else
            echo "NPM_TOKEN secret is available"
          fi

      - name: Get release version
        id: get_version
        run: |
          # Log detailed event information for debugging
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}" # Will show 'published', etc.
          
          if [ "${{ github.event_name }}" == "release" ]; then
            # For release event, use the release tag
            TAG_NAME="${{ github.event.release.tag_name }}"
            echo "Release tag name: $TAG_NAME"
            
            # Extract version from release tag (remove 'v' prefix if present)
            if [[ "$TAG_NAME" == v* ]]; then
              VERSION="${TAG_NAME#v}"
            else
              VERSION="$TAG_NAME"
            fi
            
            echo "Extracted version from tag: $VERSION"
            
            # Verify this version exists in package.json
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            echo "Current package.json version: $PACKAGE_VERSION"
            
            # If versions are different, we need to update the package.json (will do later)
            if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
              echo "Note: package.json version ($PACKAGE_VERSION) differs from release tag ($VERSION)"
              echo "Will update package.json before publishing"
            fi
          else
            # For manual workflow or other trigger, use package.json version
            VERSION=$(node -p "require('./package.json').version")
            echo "Using version from package.json: $VERSION"
            
            # For manual triggers on dev versions, convert to release version if needed
            if [[ "$VERSION" == *-dev* ]]; then
              RELEASE_VERSION=$(echo "$VERSION" | sed -e 's/-dev.*$//')
              echo "Converting dev version $VERSION to release version $RELEASE_VERSION for publishing"
              VERSION="$RELEASE_VERSION"
            fi
          fi
          
          # Check if version is valid semver
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Warning: Version '$VERSION' doesn't appear to be valid semver. Will continue anyway."
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing npm package for version: $VERSION"

      # Check if this version already exists in the npm registry
      - name: Check if package version already exists
        id: check_package
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Checking if npm package for version $VERSION already exists..."
          
          # Try to get version info from npm - will exit with non-zero if it doesn't exist
          if npm view mcp-grocy-api@$VERSION version &>/dev/null; then
            echo "Package version already exists in npm registry. Skipping publish."
            echo "package_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Package version does not exist yet. Proceeding with publish."
            echo "package_exists=false" >> $GITHUB_OUTPUT
          fi

      # Install dependencies
      - name: Install dependencies
        if: steps.check_package.outputs.package_exists != 'true'
        run: npm install

      # Build the package
      - name: Build
        if: steps.check_package.outputs.package_exists != 'true'
        run: npm run build

      # Update package.json version to match release if needed
      - name: Ensure package version matches release version
        if: steps.check_package.outputs.package_exists != 'true'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.get_version.outputs.version }}"
          
          if [ "$CURRENT_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Updating package.json version from $CURRENT_VERSION to $RELEASE_VERSION"
            npm version $RELEASE_VERSION --no-git-tag-version
          else
            echo "Package version already matches release version: $RELEASE_VERSION"
          fi

      # Publish to npm with better error handling and retries
      - name: Publish package
        if: steps.check_package.outputs.package_exists != 'true'
        run: |
          echo "Checking npm configuration..."
          npm config list
          
          # Debug npm registry settings
          echo "NPM registry URL from npm config:"
          npm config get registry
          
          # Debug token existence (never print the actual token)
          if [ -n "$NODE_AUTH_TOKEN" ]; then
            echo "NODE_AUTH_TOKEN is set (value not shown for security)"
          else
            echo "WARNING: NODE_AUTH_TOKEN appears to be empty!"
          fi
          
          # Debug authentication
          echo "Verifying npm authentication..."
          npm whoami || {
            echo "Failed to authenticate to npm registry"
            echo "This could be due to token issues or network problems"
          }
          
          echo "Checking package.json before publish..."
          cat package.json
          
          # Ensure .npmrc is properly set up
          echo "Creating/checking .npmrc file..."
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "@modelcontextprotocol:registry=https://registry.npmjs.org/" >> .npmrc
          
          # Try publishing with different methods
          echo "Publishing package to npm..."
          npm publish --access public || {
            echo "First publish attempt failed, trying again with verbose logging..."
            npm publish --access public --verbose || {
              echo "Second attempt failed, trying with explicit registry..."
              npm publish --access public --registry=https://registry.npmjs.org/
            }
          }
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Summary
      - name: Workflow Summary
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "${{ steps.check_package.outputs.package_exists }}" == "true" ]]; then
            echo "Package version $VERSION already exists in the npm registry. No new package was published."
          else
            echo "Successfully published npm package version $VERSION."
          fi
