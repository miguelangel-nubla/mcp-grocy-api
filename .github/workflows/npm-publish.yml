# .github/workflows/npm-publish.yml
name: Publish Package to npm

on:
  release:
    types: [published] # Trigger only when a new release is published
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read # Needed to check out code
  packages: write # Needed for npm registry

jobs:
  publish-npm:
    name: Publish Package to NPM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Get release version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            # For release event, use the release tag
            TAG_NAME="${{ github.event.release.tag_name }}"
            # Extract version from release tag (remove 'v' prefix if present)
            if [[ "$TAG_NAME" == v* ]]; then
              VERSION="${TAG_NAME#v}"
            else
              VERSION="$TAG_NAME"
            fi
          else
            # For manual workflow, use package.json version
            VERSION=$(node -p "require('./package.json').version")
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing npm package for version: $VERSION"

      # Check if this version already exists in the npm registry
      - name: Check if package version already exists
        id: check_package
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Checking if npm package for version $VERSION already exists..."
          
          # Try to get version info from npm - will exit with non-zero if it doesn't exist
          if npm view mcp-grocy-api@$VERSION version &>/dev/null; then
            echo "Package version already exists in npm registry. Skipping publish."
            echo "package_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Package version does not exist yet. Proceeding with publish."
            echo "package_exists=false" >> $GITHUB_OUTPUT
          fi

      # Install dependencies
      - name: Install dependencies
        if: steps.check_package.outputs.package_exists != 'true'
        run: npm install

      # Build the package
      - name: Build
        if: steps.check_package.outputs.package_exists != 'true'
        run: npm run build

      # Update package.json version to match release if needed
      - name: Ensure package version matches release version
        if: steps.check_package.outputs.package_exists != 'true'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.get_version.outputs.version }}"
          
          if [ "$CURRENT_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Updating package.json version from $CURRENT_VERSION to $RELEASE_VERSION"
            npm version $RELEASE_VERSION --no-git-tag-version
          else
            echo "Package version already matches release version: $RELEASE_VERSION"
          fi

      # Publish to npm
      - name: Publish package
        if: steps.check_package.outputs.package_exists != 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Summary
      - name: Workflow Summary
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "${{ steps.check_package.outputs.package_exists }}" == "true" ]]; then
            echo "Package version $VERSION already exists in the npm registry. No new package was published."
          else
            echo "Successfully published npm package version $VERSION."
          fi
