name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  issues: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - name: Lint commit messages
        run: npx commitlint --from $(git rev-list --max-parents=0 HEAD) --to HEAD || echo "Commit linting warnings found but continuing build"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - name: Run tests
        run: npm test
        env:
          # Use mock mode for tests to avoid hitting real API endpoints
          NODE_ENV: test
          MOCK_API: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/
          retention-days: 1
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, test]
    # Allow releases when pushing to main or when merging a PR from dev to main
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    outputs:
      version: ${{ steps.package-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history ensures semantic-release works properly
          fetch-tags: true # Explicitly fetch tags
          # Force fetch from default remote
          ref: ${{ github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm install
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      
      # Verify release configuration before running semantic-release
      - name: Verify Release Configuration
        run: |
          echo "Verifying release configuration..."
          npm run verify-release-config
          if [ $? -ne 0 ]; then
            echo "::error::Release configuration verification failed!"
            exit 1
          fi
          echo "Release configuration verification passed!"
      
      # No need to set up NPM token since we publish via separate workflow
      
      # Ensure we have all tags and history for semantic-release to work properly
      - name: Fetch complete Git history
        run: |
          echo "Fetching complete Git history and tags..."
          git fetch --tags --force --depth=1000
          git fetch origin main --depth=1000
          git fetch origin dev --depth=1000
          
          echo "Git tags:"
          git tag -l
          
          echo "Latest commits:"
          git log --oneline -15
          
      # Generate semantic version, changelog from commit messages, create GitHub release and don't publish to NPM
      - name: Run Semantic Release - Main Branch
        id: semantic-release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # No NPM tokens needed since we publish via the separate npm-publish workflow
          # Enable debug mode for more verbose output
          DEBUG: "semantic-release:*"
        run: |
          # Create a simplified semantic-release config to ensure it works reliably
          cat > .releaserc.enhanced.json << EOF
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "docs", "release": "patch"},
                  {"type": "fix", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"scope": "deps", "release": "patch"},
                  {"type": "feat", "release": "minor"},
                  {"type": "BREAKING CHANGE", "release": "major"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/npm", {"npmPublish": false}],
              ["@semantic-release/exec", {
                "prepareCmd": "sed -i 's/version: \"[0-9]*\\\\.[0-9]*\\\\.[0-9]*\"/version: \"${nextRelease.version}\"/' config.yaml"
              }],
              ["@semantic-release/git", {
                "assets": ["package.json", "CHANGELOG.md", "config.yaml", "build/version.js"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "successComment": true,
                "failComment": true,
                "failTitle": "Release Failed",
                "labels": ["release"],
                "releasedLabels": ["released"]
              }]
            ]
          }
          EOF
          
          echo "Simplified semantic-release configuration created:"
          cat .releaserc.enhanced.json
          
          # Display git commit info for debugging
          echo "Recent Git commits that will be analyzed:"
          git log --oneline -10
          
          # Run semantic-release with the enhanced config and allow it to fail
          npx semantic-release --debug --extends ./.releaserc.enhanced.json || {
            echo "::warning::Semantic release failed but we'll continue the workflow"
            # Continue to allow the workflow to proceed and use fallback release mechanism
            exit 0
          }
        continue-on-error: true
      
      - name: Run Semantic Release - Dev Branch
        id: semantic-release-dev
        if: github.ref == 'refs/heads/dev'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # We don't set NPM_TOKEN at all (not even empty) to fully avoid npm authentication
          # Enable debug mode for more verbose output
          DEBUG: "semantic-release:*"
        run: |
          echo "Running semantic-release on dev branch without npm publishing..."
          # First run the debug script to collect information
          npm run debug-release-config
          
          # Verify the release dev config
          echo "Verifying release configuration..."
          npm run verify-release-config
          
          # Fetch all tags and history to ensure accurate version calculation
          echo "Fetching complete git history and tags for accurate versioning..."
          git fetch --tags --force
          
          # Show current version details
          echo "Current package version: $(node -p "require('./package.json').version")"
          echo "Latest git tag: $(git describe --abbrev=0 --tags || echo 'no tags found')"
          
          # Run the prepare-dev-release script to set proper version based on main branch
          echo "Running prepare-dev-release script to ensure correct versioning..."
          npm run prepare-dev-release
          
          # If the version was updated, commit the changes
          if git diff --name-only | grep -q "package.json\|config.yaml"; then
            echo "Version was updated, committing changes..."
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add package.json config.yaml
            git commit -m "chore(release): update version for dev branch [skip ci]"
            # Note: We don't push here, semantic-release will handle that
          else
            echo "No version changes detected."
          fi
          
          # Run semantic-release with the proper flags for dev branch
          # Use --no-ci for environment variable handling
          # Use --extends with explicit path for complete config replacement
          # Use --no-npm to explicitly skip npm-related functionality
          NODE_DEBUG=semantic-release:* npx semantic-release --debug --no-ci --no-npm --extends $(pwd)/.release-dev.json || {
            echo "::warning::Semantic release failed but we'll continue the workflow"
            
            # Run the debug script again to collect more information
            echo "Running detailed debug script for diagnostic information:"
            npm run debug-release-config
            
            # Continue to allow the workflow to proceed
            exit 0
          }
        continue-on-error: false
      
      # Store the new version number as an output variable - always run for main branch
      - name: Get version from package.json
        id: package-version
        if: github.ref == 'refs/heads/main' || (github.ref == 'refs/heads/dev' && steps.semantic-release-dev.outcome == 'success')
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Config.yaml version update is handled by semantic-release/exec plugin
      
      # For dev branch, log the version but don't update config.yaml or publish to NPM
      - name: Log dev version
        if: github.ref == 'refs/heads/dev' && steps.semantic-release-dev.outcome == 'success'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Created pre-release version $VERSION on dev branch (not updating config.yaml or publishing to npm)"
          
      # Debug GitHub Release API access
      - name: Debug GitHub Release API
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Testing GitHub API access for releases..."
          VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $VERSION"
          
          # Test API access
          echo "Checking GitHub API rate limits:"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit
          
          echo "Listing recent releases:"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | head -n 30
      
      # Log version info for main branch and verify release was created
      - name: Verify GitHub Release
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Working with version $VERSION"
          echo "-----------------------------------------------------"
          echo "Checking if GitHub Release v$VERSION exists..."
          echo "-----------------------------------------------------"
          
          # Check for an existing git tag first
          if ! git rev-parse v$VERSION >/dev/null 2>&1; then
            echo "No git tag v$VERSION found, will be created by fallback mechanism"
            # Don't exit - let the fallback step handle it
          else
            echo "Git tag v$VERSION exists"
          fi
          
          # Give GitHub API some time to propagate the release if it was just created
          echo "Waiting before checking GitHub API..."
          sleep 5
          
          # Verify if GitHub release exists (try multiple times with increasing delays)
          MAX_ATTEMPTS=3
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            echo "Verification attempt $attempt of $MAX_ATTEMPTS..."
            
            # Check if release exists by tag with proper error handling
            RESPONSE=$(curl -s -w "\n%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION)
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | head -n -1)
            
            if [[ "$HTTP_CODE" == "200" ]] && echo "$BODY" | grep -q "\"id\":"; then
              echo "✅ Success: GitHub Release v$VERSION already exists!"
              echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
              echo "📦 This release should trigger the Docker and NPM publishing workflows automatically."
              # Don't exit - let the process continue to ensure all steps run
              break
            elif [[ "$HTTP_CODE" == "404" ]]; then
              echo "Release not found yet (404). Will be created by fallback mechanism."
            else
              echo "API returned unexpected status code: $HTTP_CODE"
              echo "Response body: $BODY"
              echo "Will attempt to create release via fallback mechanism."
            fi
            
            if [ $attempt -lt $MAX_ATTEMPTS ]; then
              echo "Waiting before next check..."
              sleep 3
            fi
          done
          
          echo "Proceeding with workflow - fallback release mechanism will create release if needed."

      # Fallback: Create GitHub release guaranteed to work - ALWAYS runs on main
      - name: Create GitHub Release (Guaranteed Fallback)
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Ensuring GitHub release exists for version v$VERSION..."
          
          # Check if the release already exists - use proper error handling
          RELEASE_CHECK=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION)
          
          if [[ "$RELEASE_CHECK" == "404" ]]; then
            echo "GitHub Release not found, creating manually..."
            
            # First create a git tag if it doesn't exist
            if ! git rev-parse v$VERSION >/dev/null 2>&1; then
              echo "Creating git tag v$VERSION..."
              git config --local user.email "github-actions[bot]@users.noreply.github.com"
              git config --local user.name "github-actions[bot]"
              git tag v$VERSION
              git push origin v$VERSION
              echo "Tag v$VERSION created and pushed."
            fi
            
            # Extract changelog
            if [[ -f "CHANGELOG.md" ]]; then
              echo "Extracting changelog section for v$VERSION..."
              CHANGELOG_SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
              
              if [[ -z "$CHANGELOG_SECTION" ]]; then
                echo "Changelog section not found, using commit messages instead."
                CHANGELOG_SECTION="Release v$VERSION\n\nCommit changes:\n$(git log --pretty=format:'- %s' -5)"
              fi
            else
              echo "No CHANGELOG.md found, using commit messages."
              CHANGELOG_SECTION="Release v$VERSION\n\nCommit changes:\n$(git log --pretty=format:'- %s' -5)"
            fi
            
            # Format changelog for JSON
            CHANGELOG_JSON=$(echo "$CHANGELOG_SECTION" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            
            # Check if this is a merge from dev to main
            IS_MERGE_FROM_DEV=false
            if git log -1 --pretty=%B | grep -q "Merge.*from.*dev"; then
              IS_MERGE_FROM_DEV=true
              echo "This is a merge from dev to main."
              
              # Get the latest dev tag
              LATEST_DEV_TAG=$(git describe --tags --match="v*-dev*" --abbrev=0 2>/dev/null || echo "")
              
              if [[ ! -z "$LATEST_DEV_TAG" ]]; then
                echo "Latest dev tag: $LATEST_DEV_TAG"
                
                # Extract version number without the "v" prefix and "-dev" suffix
                DEV_VERSION=$(echo "$LATEST_DEV_TAG" | sed -e 's/^v//' -e 's/-dev.*$//')
                echo "Dev version without suffix: $DEV_VERSION"
                
                # If the dev version (without suffix) is greater than the current version, use it
                if [ "$(printf '%s\n' "$DEV_VERSION" "$VERSION" | sort -V | head -n1)" != "$DEV_VERSION" ] && [ "$DEV_VERSION" != "$VERSION" ]; then
                  echo "Dev version $DEV_VERSION is newer than current version $VERSION"
                  echo "Using dev version $DEV_VERSION for the release"
                  VERSION=$DEV_VERSION
                  
                  # Update package.json version
                  npm version $VERSION --no-git-tag-version
                  echo "Updated package.json to version $VERSION"
                fi
              fi
            fi
            
            # Create the release with proper error handling
            echo "Creating GitHub release for v$VERSION..."
            RESPONSE=$(curl -s -w "\n%{http_code}" \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{
                \"tag_name\": \"v$VERSION\",
                \"target_commitish\": \"${{ github.sha }}\",
                \"name\": \"v$VERSION\",
                \"body\": \"$CHANGELOG_JSON\",
                \"draft\": false,
                \"prerelease\": false
              }" \
              https://api.github.com/repos/${{ github.repository }}/releases)
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
            
            if [[ "$HTTP_CODE" == "201" ]]; then
              echo "✅ GitHub Release v$VERSION successfully created!"
              RELEASE_URL=$(echo "$RESPONSE_BODY" | grep -o '"html_url":"[^"]*"' | cut -d'"' -f4)
              echo "Release URL: $RELEASE_URL"
            else
              echo "❌ Failed to create GitHub Release. Status: $HTTP_CODE"
              echo "Response: $RESPONSE_BODY"
              echo "Will continue workflow regardless to allow other steps to proceed."
            fi
          else
            echo "✅ GitHub Release v$VERSION already exists, skipping manual creation"
          fi
          
      # Final release check and summary
      - name: Final Release Check
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "===================== FINAL RELEASE SUMMARY ====================="
          echo "Package version: v$VERSION"
          
          # Check if the release exists
          RELEASE_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION)
            
          if [[ "$RELEASE_CHECK" == "200" ]]; then
            echo "✅ GitHub Release v$VERSION EXISTS"
            echo "🔔 The Docker publish workflow should now trigger automatically."
            echo "🔔 The npm publish workflow should now trigger automatically."
          else
            echo "❌ GitHub Release v$VERSION DOES NOT EXIST"
            echo "⚠️ Docker and npm publish workflows may not trigger correctly."
            echo "Consider manually triggering docker-publish.yml and npm-publish.yml workflows."
          fi
          echo "================================================================="


  update-submodule:
    name: Update hassio-addons Submodule
    runs-on: ubuntu-latest
    needs: [release]
    # Always update the submodule for main branch pushes - no version condition
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout hassio-addons repository
        uses: actions/checkout@v4
        with:
          repository: saya6k/hassio-addons
          token: ${{ secrets.HASSIO_ADDONS_TOKEN }}
          path: hassio-addons
      
      - name: Setup Git configuration
        working-directory: hassio-addons
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Check if submodule exists
        id: check-submodule
        working-directory: hassio-addons
        run: |
          if grep -q "mcp-grocy-api" .gitmodules 2>/dev/null; then
            echo "SUBMODULE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "SUBMODULE_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update existing submodule
        if: steps.check-submodule.outputs.SUBMODULE_EXISTS == 'true'
        working-directory: hassio-addons
        run: |
          # More robust submodule update that doesn't fail if there are issues with other submodules
          git config -f .gitmodules --get-regexp '^submodule\.mcp-grocy-api\.path$' || true
          
          # Check if the directory exists and is a git repository
          if [ -d "mcp-grocy-api" ] && [ -d "mcp-grocy-api/.git" ]; then
            cd mcp-grocy-api
            git fetch
            git checkout main
            git pull
            cd ..
          else
            # If directory doesn't exist or isn't a git repo, initialize just this submodule
            git submodule init mcp-grocy-api
            git submodule update --remote mcp-grocy-api
          fi
          
          # Commit the updated submodule
          git add mcp-grocy-api
          git commit -m "chore: update mcp-grocy-api submodule to latest version" || echo "No changes to commit"
          git push || echo "No changes to push"
      
      - name: Check and update gitignore
        if: steps.check-submodule.outputs.SUBMODULE_EXISTS == 'false'
        working-directory: hassio-addons
        run: |
          # Check if mcp-grocy-api is in .gitignore
          if grep -q "mcp-grocy-api" .gitignore 2>/dev/null; then
            # Remove or comment out the line from .gitignore
            sed -i 's/mcp-grocy-api/#mcp-grocy-api - submodule now/g' .gitignore
            git add .gitignore
            git commit -m "chore: update .gitignore to allow mcp-grocy-api submodule"
            git push
          fi
      
      - name: Add new submodule if it doesn't exist
        # This step will only run if the submodule doesn't exist
        # and the previous step didn't find it in .gitignore
        if: steps.check-submodule.outputs.SUBMODULE_EXISTS == 'false'
        working-directory: hassio-addons
        run: |
          # Add the new submodule with force flag
          git submodule add -f https://github.com/saya6k/mcp-grocy-api.git mcp-grocy-api
          
          # Directly initialize just this submodule without trying to init others
          cd mcp-grocy-api
          git checkout main
          cd ..
          
          # Commit the new submodule
          git add .gitmodules mcp-grocy-api
          git commit -m "chore: add mcp-grocy-api submodule"
          git push
