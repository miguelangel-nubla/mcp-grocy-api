name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - name: Lint commit messages
        run: echo "Skipping commit linting for now"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - name: Run tests
        run: npm test
        env:
          # Use mock mode for tests to avoid hitting real API endpoints
          NODE_ENV: test
          MOCK_API: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/
          retention-days: 1
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    # Allow releases when pushing to main or when merging a PR from dev to main
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # This ensures all tags are fetched for proper versioning
          fetch-tags: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm install
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      
      - name: Verify npm token
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          npm whoami || echo "npm token verification failed"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      # Generate semantic version, changelog from commit messages, and publish to NPM if on main branch
      - name: Run Semantic Release - Main Branch
        id: semantic-release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          # Enable debug mode for more verbose output
          DEBUG: "semantic-release:*"
        run: npx semantic-release --debug
      
      - name: Run Semantic Release - Dev Branch
        id: semantic-release-dev
        if: github.ref == 'refs/heads/dev'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Enable debug mode for more verbose output
          DEBUG: "semantic-release:*"
        run: npx semantic-release --debug -e ./.release-dev.json
      
      # Store the new version number as an output variable
      - name: Get version from package.json
        id: package-version
        if: (github.ref == 'refs/heads/main' && steps.semantic-release.outcome == 'success') || (github.ref == 'refs/heads/dev' && steps.semantic-release-dev.outcome == 'success')
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Update version in config.yaml for Home Assistant addon (main branch only)
      - name: Update version in config.yaml
        if: github.ref == 'refs/heads/main' && steps.semantic-release.outcome == 'success'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Updating config.yaml version to $VERSION"
          # More robust regex that handles both patterns
          sed -i "s/version: \"[0-9]*\.[0-9]*\.[0-9]*\"/version: \"$VERSION\"/" config.yaml
          
          # Check if file was changed and commit if needed
          if git diff --quiet config.yaml; then
            echo "config.yaml already up to date"
          else
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add config.yaml
            git commit -m "chore: update addon version to $VERSION [skip ci]"
            git push origin HEAD:main
          fi
      
      # For dev branch, log the version but don't update config.yaml or publish to NPM
      - name: Log dev version
        if: github.ref == 'refs/heads/dev' && steps.semantic-release-dev.outcome == 'success'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Created pre-release version $VERSION on dev branch (not updating config.yaml or publishing to npm)"

  update-submodule:
    name: Update hassio-addons Submodule
    runs-on: ubuntu-latest
    needs: [release]
    # Only update the submodule when changes are in main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.release.result == 'success'
    steps:
      - name: Checkout hassio-addons repository
        uses: actions/checkout@v4
        with:
          repository: saya6k/hassio-addons
          token: ${{ secrets.HASSIO_ADDONS_TOKEN }}
          path: hassio-addons
      
      - name: Setup Git configuration
        working-directory: hassio-addons
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Check if submodule exists
        id: check-submodule
        working-directory: hassio-addons
        run: |
          if grep -q "mcp-grocy-api" .gitmodules 2>/dev/null; then
            echo "SUBMODULE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "SUBMODULE_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update existing submodule
        if: steps.check-submodule.outputs.SUBMODULE_EXISTS == 'true'
        working-directory: hassio-addons
        run: |
          # More robust submodule update that doesn't fail if there are issues with other submodules
          git config -f .gitmodules --get-regexp '^submodule\.mcp-grocy-api\.path$' || true
          
          # Check if the directory exists and is a git repository
          if [ -d "mcp-grocy-api" ] && [ -d "mcp-grocy-api/.git" ]; then
            cd mcp-grocy-api
            git fetch
            git checkout main
            git pull
            cd ..
          else
            # If directory doesn't exist or isn't a git repo, initialize just this submodule
            git submodule init mcp-grocy-api
            git submodule update --remote mcp-grocy-api
          fi
          
          # Commit the updated submodule
          git add mcp-grocy-api
          git commit -m "chore: update mcp-grocy-api submodule to latest version" || echo "No changes to commit"
          git push || echo "No changes to push"
      
      - name: Check and update gitignore
        if: steps.check-submodule.outputs.SUBMODULE_EXISTS == 'false'
        working-directory: hassio-addons
        run: |
          # Check if mcp-grocy-api is in .gitignore
          if grep -q "mcp-grocy-api" .gitignore 2>/dev/null; then
            # Remove or comment out the line from .gitignore
            sed -i 's/mcp-grocy-api/#mcp-grocy-api - submodule now/g' .gitignore
            git add .gitignore
            git commit -m "chore: update .gitignore to allow mcp-grocy-api submodule"
            git push
          fi
      
      - name: Add new submodule
        if: steps.check-submodule.outputs.SUBMODULE_EXISTS == 'false'
        working-directory: hassio-addons
        run: |
          # Add the new submodule with force flag
          git submodule add -f https://github.com/saya6k/mcp-grocy-api.git mcp-grocy-api
          
          # Directly initialize just this submodule without trying to init others
          cd mcp-grocy-api
          git checkout main
          cd ..
          
          # Commit the new submodule
          git add .gitmodules mcp-grocy-api
          git commit -m "chore: add mcp-grocy-api submodule"
          git push
